Overloading ‘+’ vs. StringBuilder



if a loop is involved and we are simply appending(+) with the string, an new StringBuilder will be created
internally everytime. But if we start with StringBuilder itself , then it will be only created once. so prefer
StringBuilder in case of loop as following explains:


Thus, when you create a toString( ) method, if the operations are simple ones that the
compiler can figure out on its own, you can generally rely on the compiler to build the result
in a reasonable fashion. But if looping is involved, you should explicitly use a StringBuilder
in your toString( ), like this:
//: strings/UsingStringBuilder.java
import java.util.*;
public class UsingStringBuilder {
public static Random rand = new Random(47);
public String toString() {
StringBuilder result = new StringBuilder("[");
for(int i = 0; i < 25; i++) {
result.append(rand.nextInt(100));
result.append(", ");
}
result.delete(result.length()-2, result.length());
result.append("]");
return result.toString();
}
public static void main(String[] args) {
UsingStringBuilder usb = new UsingStringBuilder();
System.out.println(usb);
}
}

--------------------
Although StringBuilder has a full complement of methods, including insert( ), replace(
), substring( ) and even reverse( ), the ones you will generally use are append( ) and
toString( )

-----------------INFINITE RECURSION
If you intend to print the class's address also, so you do following in toString inside that class which leads to infinite recursion
return " InfiniteRecursion address: " + this + "\n";

instead of above you should use:
return " InfiniteRecursion address: " + super.toString + "\n";


more explanation:
If you create an InfiniteRecursion object and then print it, you’ll get a very long sequence
of exceptions. This is also true if you place the InfiniteRecursion objects in an ArrayList
and print that ArrayList as shown here. What’s happening is automatic type conversion for
Strings. When you say:
"InfiniteRecursion address: " + this
The compiler sees a String followed by a’+’ and something that’s not a String, so it tries to
convert this to a String. It does this conversion by calling toString( ), which produces a
recursive call.
If you really do want to print the address of the object, the solution is to call the
ObjecttoString( ) method, which does just that. So instead of saying this, you’d say
super.toString( ).

---------------------- Formatter Example below
import java.util.*;
public class Receipt {
private double total = 0;
private Formatter f = new Formatter(System.out);
public void printTitle() {
f.format("%-15s %5s %10s\n", "Item", "Qty", "Price");
f.format("%-15s %5s %10s\n", "----", "---", "-----");
}
public void print(String name, int qty, double price) {
f.format("%-15.15s %5d %10.2f\n", name, qty, price);
total += price;
}
public void printTotal() {
f.format("%-15s %5s %10.2f\n", "Tax", "", total*0.06);
f.format("%-15s %5s %10s\n", "", "", "-----");
f.format("%-15s %5s %10.2f\n", "Total", "",
total * 1.06);
}
public static void main(String[] args) {
Receipt receipt = new Receipt();
receipt.printTitle();
receipt.print("Jack’s Magic Beans", 4, 4.25);
receipt.print("Princess Peas", 3, 5.1);
receipt.print("Three Bears Porridge", 1, 14.29);
receipt.printTotal();
}
}


---------------String.format()   or sprintf in c

Left, please look into book

ex-
String.format("%02X ", b)

------------------ ************* important    Regular expressions	 java.util.regex.Pattern
note:
In Java, ‘ \ \ ‘ means "I’m inserting a regular
expression backslash, so that the following character has special meaning.
 For example, if
you want to indicate a digit, your regular expression string will be ‘\\d’.
If you want to insert
a literal backslash, you say ‘\\\\’- However, things like newlines and tabs just use a single
backslash: ‘\n\t’.


-? a number might or might not be preceded by a minus sign, you put in the minus sign followed
	by a question mark, like this: 
	
-?\\d+	a minus sign, followed by one or more digits	



public class IntegerMatch {
public static void main(String[] args) {
System.out.println("-1234".matches("-?\\d+"));
System.out.println("5678".matches("-?\\d+"));
System.out.println("+911".matches("-?\\d+"));
System.out.println("+911".matches("(-|\\+)?\\d+"));
}
} /* Output:
true
true
false
true




(-|\\+)?   this means either - or  +, but + has special meaning, so escaped with \\



 ‘\W’, which means a non-word character (the
lowercase version, ‘\w’, means a word character)


--------------------
The final regular expression tool built into String is replacement. You can either replace the
first occurrence, or all of them:
//: strings/Replacing.java
import static net.mindview.util.Print.*;
public class Replacing {
static String s = Splitting.knights;
public static void main(String[] args) {

print(s.replaceFirst("f\\w+", "located"));
print(s.replaceAll("shrubbery|tree|herring","banana"));
}
} /* Output:
Then, when you have located the shrubbery, you must cut down the
mightiest tree in the forest... with... a herring!
Then, when you have found the banana, you must cut down the mightiest
banana in the forest... with... a banana!
*///:~


-----------------
(X) A capturing group. You can refer to the ith captured group later in the expression with \i.



NOTE NOTE NOTE BELOW
Keep in mind that the expression ‘X’ will often need to be surrounded in parentheses for it to
work the way you desire. For example:
abc+
might seem like it would match the sequence ‘abc’ one or more times, and if you apply it to
the input string ‘abcabcabc’, you will in fact get three matches. However, the expression
actually says, "Match ‘ab’ followed by one or more occurrences of ‘c’." To match the entire
string ‘abc’ one or more times, you must say:
374 Thinking in Java Bruce Eckel
(abc)+
You can easily be fooled when using regular expressions; it’s an orthogonal language, on top
of Java.



-------------MATCHER
find()
Matcher.find( ) can be used to discover multiple pattern matches in the CharSequence to
which it is applied. For example:
//: strings/Finding.java
import java.util.regex.*;
import static net.mindview.util.Print.*;
public class Finding {
public static void main(String[] args) {
Matcher m = Pattern.compile("\\w+")
.matcher("Evening is full of the linnet’s wings");
while(m.find())
printnb(m.group() + " ");
print();
int i = 0;
while(m.find(i)) {
printnb(m.group() + " ");
i++;
}
}
} /* Output:
Evening is full of the linnet s wings
Evening vening ening ning ing ng g is is s full full ull ll l of of f
the the he e linnet linnet innet nnet net et t s s wings wings ings ngs
gs s
*///:~
The pattern ‘\\w+’ splits the input into words. find( ) is like an iterator, moving forward
through the input string. However, the second version of find( ) can be given an integer
argument that tells it the character position for the beginning of the search—this version
resets the search position to the value of the argument, as you can see from the output.


------------ groups
Groups
Groups are regular expressions set off by parentheses that can be called up later with their
group number. Group o indicates the whole expression match, group l is the first
parenthesized group, etc. Thus in
A(B(C))D
there are three groups: Group 0 is ABCD, group 1 is BC, and group 2 is C.

-------- SPLIT
split()
split( ) divides an input string into an array of String objects, delimited by the regular
expression.
String[] split(CharSequence input)
String[] split(CharSequence input, int limit)
This is a handy way to break input text on a common boundary:
//: strings/SplitDemo.java
import java.util.regex.*;
import java.util.*;
import static net.mindview.util.Print.*;
public class SplitDemo {
public static void main(String[] args) {
String input =
"This!!unusual use!!of exclamation!!points";
print(Arrays.toString(
Pattern.compile("!!").split(input)));
// Only do the first three:
print(Arrays.toString(
Pattern.compile("!!").split(input, 3)));
}
} /* Output:
[This, unusual use, of exclamation, points]
[This, unusual use, of exclamation!!points]





-----------------	EXAMPLE TO APPLY REGEX TO FILES
import java.util.regex.*;
import net.mindview.util.*;
public class JGrep {
public static void main(String[] args) throws Exception {
if(args.length < 2) {
System.out.println("Usage: java JGrep file regex");
System.exit(0);
}
Pattern p = Pattern.compile(args[1]);
// Iterate through the lines of the input file:
int index = 0;
Matcher m = p.matcher("");
for(String line : new TextFile(args[0])) {
	m.reset(line);
	while(m.find())
		System.out.println(index++ + ": " +
		m.group() + ": " + m.start());
}
}
}
Output: (Sample)
0: strings: 4
1: simple: 10
2: the: 28
3: Ssct: 26
4: class: 7
5: static: 9
6: String: 26
7: throws: 41
8: System: 6
9: System: 6
10: compile: 24
11: through: 15
12: the: 23
13: the: 36
14: String: 8
15: System: 8


The file is opened as a net.mindview.util.TextFile object (which will be shown in the I/O
chapter), which reads the lines of the file into an ArrayList. This means that the foreach
syntax can iterate through the lines in the TextFile object.